name: Release Charts

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Version
        id: version
        run: |
          # Fetch all tags
          git fetch --tags

          # Get latest stable tag
          LATEST_STABLE=$(git tag -l "v*" --sort=-version:refname | head -n1)

          if [ -z "$LATEST_STABLE" ]; then
            # No tags exist, start at 1.0.0
            VERSION="1.0.0"
          else
            # Increment minor version
            STABLE_VER=${LATEST_STABLE#v}
            IFS='.' read -r MAJOR MINOR PATCH <<< "$STABLE_VER"
            MINOR=$((MINOR + 1))
            VERSION="${MAJOR}.${MINOR}.0"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "latest_tag=$LATEST_STABLE" >> $GITHUB_OUTPUT
          echo "ðŸ“¦ Version: $VERSION"

      - name: Generate Release Notes
        id: notes
        run: |
          if [ -n "${{ steps.version.outputs.latest_tag }}" ]; then
            COMMITS=$(git log ${{ steps.version.outputs.latest_tag }}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          fi

          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Version Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package and Push Charts
        run: |
          for chart_dir in charts/*/; do
            chart_name=$(basename $chart_dir)
            helm package "$chart_dir" \
              --version=${{ steps.version.outputs.version }}
            helm push ${chart_name}-${{ steps.version.outputs.version }}.tgz \
              oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/charts
          done

          # Make the chart package public
          for chart_dir in charts/*/; do
            chart_name=$(basename $chart_dir)
            curl -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/user/packages/container/${{ github.repository_owner }}%2Fcharts%2F${chart_name}/versions \
              -d '{"visibility":"public"}' || true
          done

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.version }}
          body: ${{ steps.notes.outputs.body }}
          makeLatest: true
